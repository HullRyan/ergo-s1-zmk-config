/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

 #define DEFAULT 0
 #define PROGRAMMING 1
 #define FN  2

/ {
       keymap {
              compatible = "zmk,keymap";

              default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// | ESC  |  1   |  2   |  3   |  4   |  5   |                                                   |  6   |  7   |  8   |  9   |  0   | MINUS|
// | WIN  |  Q   |  W   |  E   |  R   |  T   |                                                   |  Y   |  U   |  I   |  O   |  P   | EQL  |
// | TAB  |  A   |  S   |  D   |  F   |  G   |                                                   |  H   |  J   |  K   |  L   | SCLN | SQT  |
// |LSHFT |  Z   |  X   |  C   |  V   |  B   |      | CTL  | ALT  |         | RALT | RCTL |      |  N   |  M   | COMM | DOT  | SLSH | PROG |
//        | GRV  | BSLS | LEFT | RGHT |      | BSPC | LCMD | DEL  |         | PGUP | ENT  | SPC  |      |  UP  |  DN  | LBKT | RBKT |
//                                                         |  FN  |         | PGDN |
                     bindings = <
        &kp ESC    &kp N1    &kp N2   &kp N3   &kp N4    &kp N5                                                                    &kp N6    &kp N7    &kp N8    &kp N9     &kp N0    &kp MINUS
        &kp TAB    &kp Q     &kp W    &kp E    &kp R     &kp T                                                                     &kp Y     &kp U     &kp I     &kp O      &kp P     &kp EQUAL
        &kp CAPS   &kp A     &kp S    &kp D    &kp F     &kp G                                                                     &kp H     &kp J     &kp K     &kp L      &kp SEMI  &kp SQT
        &kp LSHFT  &kp Z     &kp X    &kp C    &kp V     &kp B             &kp LCTRL &kp LALT  &kp RALT  &kp RCTRL                 &kp N     &kp M     &kp COMMA &kp PERIOD &kp SLASH &mo 1
                   &kp GRAVE &kp BSLH &kp LEFT &kp RIGHT         &kp BSPC  &kp LCMD  &kp DEL   &kp PG_UP &kp ENTER &kp SPACE       &kp UP    &kp DOWN  &kp HOME  &kp END
                                                                                     &mo 2     &kp PG_DN
                     >;
              };
              programming_layer {
              // ---------------------------------------------------------------------------------------------------------------------------------
// |    |      |      |      |      |      |                                                     |      |      |      |      |      |      |
// |    |      |      |  {   |  }   |  &   |                                                     |      |      |CTLUP |      |      |      |
// |    |      |      |  (   |  )   |  |   |                                                     |      |CTLLFT|CTLDN |CTLRGT|      |      |
// |    |  <   |  >   |  [   |  ]   |  !   |      |  INS  |PSCRN |         |      |      |       |      |      |      |      |      |      |
//      |      |      |      |      |      |      |  DEL  |      |         |      |      |       |      |      |      |      |      |
//                                                        |      |         |      |
                     bindings = <
        &trans    &trans   &trans    &trans      &trans       &trans                                                                   &trans     &trans       &trans       &trans        &trans  &trans
        &trans    &trans   &trans    &kp LBRC    &kp RBRC     &kp AMPS                                                                 &trans     &trans       &kp LC(UP)   &trans        &trans  &trans
        &trans    &trans   &trans    &kp LPAR    &kp RPAR     &kp PIPE                                                                 &trans     &kp LC(LEFT) &kp LC(DOWN) &kp LC(RIGHT) &trans  &trans
        &trans    &kp LT   &kp GT    &kp LBKT    &kp RBKT     &kp EXCL         &kp INS     &kp PSCRN   &trans  &trans                  &trans     &trans       &trans       &trans        &trans  &trans
                  &trans   &trans    &trans      &trans                 &trans &kp DEL     &trans      &trans  &trans &trans                      &trans       &trans       &trans        &trans
                                                                                           &trans      &trans
                     >;
              };

              fn_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// |BT_CLR|  F1  |  F2  |  F3  |  F4  |  F5  |                                                   |      |VOLDWN|MUTE  |VOLUP |      |      |
// |BT_PRV|  F6  |  F7  |  F8  |  F9  |  F10 |                                                   |      |TRPREV|PLAYPS|TRNEXT|      |      |
// |BT_NXT|      |      |      |      |      |                                                   |      |      |      |      |      |      |
// |BTSEL0|BTSEL1|BTSEL2|BTSEL3|BTSEL4|      |      |      |      |         |      |      |      |      |      |      |      |      |      |
//        |      |      |      |      |      |      |      |      |         |      |      |      |      |      |      |      |      |
//                                                         |      |         |      |
                     bindings = <
        &bt BT_CLR   &kp F1        &kp F2        &kp F3          &kp F4       &kp F5                                                                          &trans    &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP &trans  &trans
        &bt BT_PRV   &kp F6        &kp F7         &kp F8         &kp F9       &kp F10                                                                         &trans    &kp C_PREV    &kp C_PP    &kp C_NEXT   &trans  &trans
        &bt BT_NXT   &trans        &trans         &trans         &kp F11      &kp F12                                                                         &trans    &trans        &trans      &trans       &trans  &trans
        &bt BT_SEL 0 &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4 &trans              &trans    &trans    &trans    &trans                        &trans    &trans        &trans      &trans       &trans  &trans
                     &trans        &trans         &trans         &trans                &trans     &trans    &trans    &trans    &kp RCTRL &kp RALT                      &trans        &trans      &trans       &trans
                                                                                                            &trans    &trans
                     >;
              };

              extra1 {
                     status = "reserved";
              };

              extra2 {
                     status = "reserved";
              };

    };
};
